{"meta":{"title":"京涛个人博客","subtitle":"","description":"记录 成为更好的自己","author":"京涛","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2021-06-25T07:32:24.852Z","updated":"2021-06-25T07:32:24.852Z","comments":true,"path":"404.html","permalink":"http://example.com/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2021-06-29T15:30:21.141Z","updated":"2021-06-29T15:30:21.141Z","comments":true,"path":"test.html","permalink":"http://example.com/test.html","excerpt":"","text":"folding 支持的颜色： blue, cyan, green, yellow, red"},{"title":"","date":"2021-06-27T17:56:04.252Z","updated":"2021-06-27T17:56:04.252Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"这里是关于自己的内容"},{"title":"所有分类","date":"2021-06-27T17:14:16.612Z","updated":"2021-06-27T17:14:16.612Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2021-06-27T17:14:36.600Z","updated":"2021-06-27T17:14:36.600Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"那些开发中的css技巧","slug":"那些开发中的css技巧","date":"2021-07-02T04:11:42.000Z","updated":"2021-07-02T05:13:01.535Z","comments":true,"path":"post/cc46.html","link":"","permalink":"http://example.com/post/cc46.html","excerpt":"在开发中合理利用css，可以大大提高开发效率","text":"在开发中合理利用css，可以大大提高开发效率","categories":[{"name":"开发","slug":"开发","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"开发/前端","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"开发/前端/CSS","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"开发","slug":"开发","permalink":"http://example.com/tags/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"}]},{"title":"JS常用知识点总结","slug":"js常用知识点总结","date":"2021-06-29T11:41:45.000Z","updated":"2021-07-02T09:12:24.119Z","comments":true,"path":"post/535a.html","link":"","permalink":"http://example.com/post/535a.html","excerpt":"整理项目开发中遇到的问题以及经常使用的js片段","text":"整理项目开发中遇到的问题以及经常使用的js片段 1. fliter、map、reduce的使用 filter / map / reduce 均为高阶函数（高阶函数：函数的参数是另外一个函数）const nums = [10,20,111,444,40,50];对于 nums 数组有以下三个需求：&nbsp;&nbsp;&nbsp;需求1：取出所有小于100的数字得到 newNums&nbsp;&nbsp;&nbsp;需求2：将所有小于100的数字进行转化(乘以2)得到 newNums2&nbsp;&nbsp;&nbsp;需求3：将所有的 newNums2 数字相加得到最后的结果得到 total需求1：取出所有小于100的数字let newNums = [];for (let n of nums) &#123; if (n &lt; 100) &#123; newNums.push(n); &#125;&#125;需求2： 将所有小于100的数字进行转化 --乘以2let newNums2 = [];for (let n of newNums) &#123; newNums2.push(n * 2)&#125;需求3： 将所有的newNums2数字相加得到最后的结果let total = 0;for (let n of newNums2) &#123; total += n;&#125;使用 filter / map / reduce 完成以上需求需求1：取出所有小于100的数字 ---- filternums.filter(function (n) &#123; //filter中的回调函数有一个要求：必须返回一个boolean值 //当返回true时，函数内部会自动将本次回调的n加入到一个新的数组中 //当返回为false时，函数内部会过滤掉这次的n return n &lt; 100; //这里就可以直接满足第一个需求&#125;); //这里会返回一个新的数组，就是包含nums中所有值小于100的新数组let newNums = nums.filter(function (n) &#123; return n &lt; 100;&#125;)console.log(newNums); //[10,20,40,50]需求2： 将所有小于100的数字进行转化 --乘以2 ---- maplet newNums2 = newNums.map(function (n) &#123; return n * 2 ;&#125;);console.log(newNums2); // [20,40,80,100]需求3：将所有的newNums2数字相加得到最后的结果 ---- reduce//reduce作用：对数组中所有的内容进行汇总newNums2.reduce(function (preValue , n) &#123; //preValue 是上一次返回的值 //return 100; //对应下面的过程 return preValue + n;&#125;,0)//reduce(参数1，参数2); 会返回最后汇总的结果; 参数1：整合数据操作、参数2：初始值//这里面的function会执行4次，/** 第一次： preValue-&gt;0 ; n -&gt; 20; 第二次： preValue-&gt;100 ; n -&gt;40; 第二次： preValue-&gt;100 ; n -&gt;80; 第二次： preValue-&gt;100 ; n -&gt;100;*/计算最终的结果let total = nums.filter(function (n) &#123; return n &lt; 100;&#125;).map(function (n) &#123; return n * 2;&#125;).reduce(function (preValue , n) &#123; return preValue + n;&#125;,0)这样的话就很好的简化了代码，逻辑也会更加清楚。什么？还是不够简化？那下面的代码呢？最终代码let total = nums.filter(n =&gt; n &lt; 100).map(n =&gt; n * 2).reduce((preValue,n) =&gt; preValue + n);console.log(total); // total = 240;总结：filtermapreduce对数组进行过滤，当返回值为true时，才会返回当前处理的元素。映射，可以对数组中每个元素进行操作，并逐一返回，生成一个新的数组。接收一个函数作为累加器，数组中的每个值（从左到右）开始合并，最终返回一个值。reduce可接收的参数: reduce((参数1,参数2,参数3,参数4) =&gt; {}, 参数5)&nbsp;&nbsp;&nbsp;参数1. previousValue(上一次调用回调函数返回的值，或者是提供的初始值（initialValue）)&nbsp;&nbsp;&nbsp;参数2. currentValue(数组中当前被处理的元素)&nbsp;&nbsp;&nbsp;参数3. index（当前元素在数组中的索引）&nbsp;&nbsp;&nbsp;参数4. array（调用reduce的数组） 并且reduce可以传入一个初始值（参数5），初始值的格式随意定义，如果不传，默认是previousValue","categories":[{"name":"开发","slug":"开发","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"开发/前端","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"},{"name":"JS","slug":"开发/前端/JS","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/JS/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://example.com/tags/JS/"},{"name":"开发","slug":"开发","permalink":"http://example.com/tags/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"如何搭建个人博客?","slug":"如何搭建个人博客","date":"2021-06-25T05:36:46.000Z","updated":"2021-07-02T03:42:48.878Z","comments":true,"path":"post/9487.html","link":"","permalink":"http://example.com/post/9487.html","excerpt":"使用hexo搭建个人博客","text":"使用hexo搭建个人博客 搭建博客的框架很多，个人比较偏向于hexo框架： hexo只需要专注于写文档而不需要过分担心别的问题。 hexo比较成熟，如果遇到问题也可以得到很好的解决。 hexo使用github pages进行部署，不需要购买自己的服务器就可以部署到线上。 hexo有很好的主题，如：volantis， yilia…. hexo中文网站 volantis主题官方文档 1. 搭建hexo环境 hexo是基于node开发的，首先需要安装node ，其次如果想要部署到github pages 需要安装git 安装淘宝镜像 sudo npm install -g cnpm --registry=https://registry.npm.taobao.org 安装hexo-cli sudo cnpm install -g hexo-cli 检查是否安装成功 hexo -v 2. 创建hexo项目首先创建一个空的文件夹用于存放hexo项目代码，并在创建的目录中打开终端 mkdir &lt;floder&gt;cd &lt;floder&gt;hexo init// 或者直接借助hexo去实现hexo init &lt;floder&gt; // 这里hexo会自动创建文件夹并初始化项目 安装依赖 npm install 3. 启动项目启动项目常用的命令 hexo clean // 清除项目中的临时文件hexo g // OR hexo generate 生成临时文件hexo s // OR hexo start 启动项目 此时页面可以看到一个默认的博客模板并且有一篇默认的hello world 文章 4. 新建一篇文章hexo new &quot;如何搭建个人博客&quot; 5. 切换自己喜欢的主题个人比较喜欢Volantis,这里已这个为例，具体的主题需要参照具体的官方文档来做 下载主题插件 npm i hexo-theme-volantis 修改_config.yml中的 theme 字段为volantis theme: volantis 安装 Hexo 搜索的依赖包 npm i hexo-generator-search hexo-generator-json-content 安装 Stylus 渲染器 npm i hexo-renderer-stylus 这样就可以看到精美的主题啦，之后的细节慢慢去调试成自己喜欢的样子（参考官方文档） 6. 部署到github pages第一步： 在github上新建一个仓库，仓库的名字为：&lt;用户名&gt;.github.io （必须） 第二步： 修改项目根目录下的_config.yml中的 deploy 字段为： deploy: type: git repo: // 这里修改成自己的github仓库地址 branch: master 第三步： 将代码部署到github pages hexo cleanhexo g // OR hexo generatehexo d // OR hexo deploy 此时控制台会报错：ERROR Deployer not found: git这是因为项目缺少git部署的插件 npm install --save hexo-deployer-git 执行以上的语句即可～～～～～～～然后重复第三步此时就可以看到git仓库中已经有了一部分代码,神奇的是：此时去访问：&lt;用户名&gt;.github.io 就可以看到线上的博客样式了。 github pages demoJingTao-Li.github.io 7. 修改github page 为自定义的域名点击解析，添加对应的IP地址和CNAME然后在当前项目的 source/ 目录下创建一个名叫 CNAME 的文件，里面的内容就是你的域名地址。接着重新部署一下就可以了。 8. 如何在项目中引入本地图片第一步：安装插件： npm install hexo-asset-image --save 第二步：打开根目录下的 _config.yml 文件，修改 post_asset_folder 字段为 true 第三步：打开 /node_modules/hexo-asset-image/index.js 文件，替换为以下代码： &#x27;use strict&#x27;;var cheerio = require(&#x27;cheerio&#x27;);// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) &#123; return str.split(m, i).join(m).length;&#125;var version = String(hexo.version).split(&#x27;.&#x27;);hexo.extend.filter.register(&#x27;after_post_render&#x27;, function(data)&#123; var config = hexo.config; if(config.post_asset_folder)&#123; var link = data.permalink; if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3) var beginPos = getPosition(link, &#x27;/&#x27;, 1) + 1; else var beginPos = getPosition(link, &#x27;/&#x27;, 3) + 1; // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;. var endPos = link.lastIndexOf(&#x27;/&#x27;) + 1; link = link.substring(beginPos, endPos); var toprocess = [&#x27;excerpt&#x27;, &#x27;more&#x27;, &#x27;content&#x27;]; for(var i = 0; i &lt; toprocess.length; i++)&#123; var key = toprocess[i]; var $ = cheerio.load(data[key], &#123; ignoreWhitespace: false, xmlMode: false, lowerCaseTags: false, decodeEntities: false &#125;); $(&#x27;img&#x27;).each(function()&#123; if ($(this).attr(&#x27;src&#x27;))&#123; // For windows style path, we replace &#x27;\\&#x27; to &#x27;/&#x27;. var src = $(this).attr(&#x27;src&#x27;).replace(&#x27;\\\\&#x27;, &#x27;/&#x27;); if(!/http[s]*.*|\\/\\/.*/.test(src) &amp;&amp; !/^\\s*\\//.test(src)) &#123; // For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed. // In addition, to support multi-level local directory. var linkArray = link.split(&#x27;/&#x27;).filter(function(elem)&#123; return elem != &#x27;&#x27;; &#125;); var srcArray = src.split(&#x27;/&#x27;).filter(function(elem)&#123; return elem != &#x27;&#x27; &amp;&amp; elem != &#x27;.&#x27;; &#125;); if(srcArray.length &gt; 1) srcArray.shift(); src = srcArray.join(&#x27;/&#x27;); $(this).attr(&#x27;src&#x27;, config.root + link + src); console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src); &#125; &#125;else&#123; console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;); console.info&amp;&amp;console.info($(this)); &#125; &#125;); data[key] = $.html(); &#125; &#125;&#125;); 第四步：之后在新建一个新的文档内容的时候会自动生成一个同名文件夹，里面就可以放本页面需要的图片源文件，在需要的地方引入： ![这是代替图片的文字，随便写](图片名字)","categories":[{"name":"搭建个人博客","slug":"搭建个人博客","permalink":"http://example.com/categories/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"搭建","slug":"搭建","permalink":"http://example.com/tags/%E6%90%AD%E5%BB%BA/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-06-25T05:32:55.416Z","updated":"2021-06-29T10:59:02.320Z","comments":true,"path":"post/3eeb.html","link":"","permalink":"http://example.com/post/3eeb.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"开发","slug":"开发","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"开发/前端","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"开发/前端/CSS","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/CSS/"},{"name":"JS","slug":"开发/前端/JS","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/JS/"},{"name":"搭建个人博客","slug":"搭建个人博客","permalink":"http://example.com/categories/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"开发","slug":"开发","permalink":"http://example.com/tags/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"},{"name":"JS","slug":"JS","permalink":"http://example.com/tags/JS/"},{"name":"博客","slug":"博客","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"搭建","slug":"搭建","permalink":"http://example.com/tags/%E6%90%AD%E5%BB%BA/"}]}