{"meta":{"title":"京涛个人博客","subtitle":"","description":"记录 成为更好的自己","author":"京涛","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-09-30T10:00:23.000Z","updated":"2021-09-30T10:00:42.407Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"前端常见面试题积累","slug":"前端常见面试题积累","date":"2021-10-05T06:36:25.000Z","updated":"2021-10-05T07:32:26.594Z","comments":true,"path":"post/f36c.html","link":"","permalink":"http://example.com/post/f36c.html","excerpt":"分享个人面试过程中常见的问题，也包含自己对问题的理解。不断完善…..","text":"分享个人面试过程中常见的问题，也包含自己对问题的理解。不断完善….. new关键字的原理当对象使用new关键字创建的时候，程序内部都做了什么？&nbsp;&nbsp;&nbsp;1.开辟内存地址，里面放置一个空的对象&nbsp;&nbsp;&nbsp;2.this指向了空的对象&nbsp;&nbsp;&nbsp;3.构造函数的参数给空的对象赋值&nbsp;&nbsp;&nbsp;4.将赋值后的对象返回给外面使用","categories":[],"tags":[]},{"title":"filter、map、reduce的使用","slug":"filter、map、reduce的使用","date":"2021-10-04T15:20:38.000Z","updated":"2021-10-05T06:29:01.998Z","comments":true,"path":"post/4109.html","link":"","permalink":"http://example.com/post/4109.html","excerpt":"在项目开发中，会有大量的对数组、对象的操作，合理地利用部分高阶函数会让你的代码看起来更加优雅。","text":"在项目开发中，会有大量的对数组、对象的操作，合理地利用部分高阶函数会让你的代码看起来更加优雅。 直接使用一个小的案例去说明他们的关系： 12345const nums = [10,20,111,444,40,50];// 对于数据nums现有三个需求： // 1.取出所有小于100的数字 // 2.将所有小于100的数字进行转化 --乘以2 // 3.将所有的newNums2数字相加得到最后的结果。 使用普通for循环去处理以上需求 需求1：取出所有小于100的数字 123456let newNums = [];for (let n of nums) &#123; if (n &lt; 100) &#123; newNums.push(n); &#125;&#125; 需求2： 将所有小于100的数字进行转化 –乘以2 1234let newNums2 = [];for (let n of newNums) &#123; newNums2.push(n * 2)&#125; 需求3： 将所有的newNums2数字相加得到最后的结果。 1234let total = 0;for (let n of newNums2) &#123; total += n;&#125; filter / map / reduce 完成以上需求123456789101112//需求1：取出所有小于100的数字nums.filter(function (n) &#123; //filter中的回调函数有一个要求：必须返回一个boolean值 //当返回true时，函数内部会自动将本次回调的n加入到一个新的数组中 //当返回为false时，函数内部会过滤掉这次的n return n &lt; 100; //这里就可以直接满足第一个需求&#125;); //这里会返回一个新的数组，就是包含nums中所有值小于100的新数组let newNums = nums.filter(function (n) &#123; return n &lt; 100;&#125;)console.log(newNums); // [10,20,40,50] 12345//需求2： 将所有小于100的数字进行转化 --乘以2let newNums2 = newNums.map(function (n) &#123; return n * 2 ;&#125;);console.log(newNums2); // [20,40,80,100] 123456789101112131415//需求3：将所有的newNums2数字相加得到最后的结果//reduce作用：对数组中所有的内容进行汇总newNums2.reduce(function (preValue , n) &#123; //preValue 是上一次返回的值 //return 100; //对应下面的过程 return preValue + n;&#125;,0)//reduce(参数1，参数2); 会返回最后汇总的结果; 参数1：整合数据操作、参数2：初始值//这里面的function会执行4次，/** 第一次： preValue-&gt;0 ; n -&gt; 20; 第二次： preValue-&gt;100 ; n -&gt;40; 第二次： preValue-&gt;100 ; n -&gt;80; 第二次： preValue-&gt;100 ; n -&gt;100;*/ 计算最终的结果 1234567let total = nums.filter(function (n) &#123; return n &lt; 100;&#125;).map(function (n) &#123; return n * 2;&#125;).reduce(function (preValue , n) &#123; return preValue + n;&#125;,0) 这样的话就很好的简化了代码，逻辑也会更加清楚。什么？还是不够简化？那下面的代码呢？ 12let total = nums.filter(n =&gt; n &lt; 100).map(n =&gt; n * 2).reduce((preValue,n) =&gt; preValue + n);console.log(total); // total = 240; 总结filter: 对数组进行过滤，当返回值为true时，才会返回当前处理的元素。map: 映射，可以对数组中每个元素进行操作，并逐一返回，生成一个新的数组。reduce: 接收一个函数作为累加器，数组中的每个值（从左到右）开始合并，最终返回一个值。reduce可接收的参数: reduce((参数1,参数2,参数3,参数4) =&gt; {}, 参数5) 参数1. previousValue(上一次调用回调函数返回的值，或者是提供的初始值（initialValue）) 参数2. currentValue(数组中当前被处理的元素) 参数3. index（当前元素在数组中的索引） 参数4. array（调用reduce的数组）并且reduce可以传入一个初始值（参数5），初始值的格式随意定义，如果不传，默认是previousValue","categories":[{"name":"JS","slug":"JS","permalink":"http://example.com/categories/JS/"},{"name":"开发","slug":"JS/开发","permalink":"http://example.com/categories/JS/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"JS/开发/前端","permalink":"http://example.com/categories/JS/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://example.com/tags/JS/"},{"name":"开发","slug":"开发","permalink":"http://example.com/tags/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"那些开发中的css技巧","slug":"那些开发中的css技巧","date":"2021-07-02T04:11:42.000Z","updated":"2021-10-08T09:31:36.191Z","comments":true,"path":"post/cc46.html","link":"","permalink":"http://example.com/post/cc46.html","excerpt":"在开发中合理利用css，可以大大提高开发效率","text":"在开发中合理利用css，可以大大提高开发效率 去除safari浏览器输入框的小图标以及密码输入的钥匙图标12345678910111213/* 去掉Safari浏览器下密码输入框自带的小钥匙图标 */input::-webkit-credentials-auto-fill-button &#123; display: none !important; visibility: hidden; pointer-events: none; position: absolute; right: 0;&#125;/* 去掉safari浏览器input右边的小图标/小按钮 */input:focus::-webkit-contacts-auto-fill-button&#123; opacity: 0;&#125; 调整浏览器滚动条的样式12345678910111213141516171819202122232425/*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/::-webkit-scrollbar &#123; /* width: 5px; height: 5px; */&#125;/*定义滚动条轨道 内阴影+圆角*/::-webkit-scrollbar-track &#123; border-radius: 999px; border:0px solid transparent; box-shadow: 1px 1px 5px rgba(100,100,100,.2) inset;&#125;/*定义滑块 内阴影+圆角*/::-webkit-scrollbar-thumb &#123; border-radius: 999px;border:0px solid transparent; min-height: 20px; background-clip: content-box; box-shadow: 0 0 0 5px rgba(100,100,100,.5) inset; -webkit-box-shadow:0 0 0 5px rgba(100,100,100,.5) inset;&#125;::-webkit-scrollbar-corner &#123; background:transparent;&#125; 毛玻璃效果12345div &#123; background: hsla(0, 0%, 100%, .75); -webkit-backdrop-filter: blur(5px); backdrop-filter: blur(5px);&#125; 手机端点开多选框出现蓝色块123* &#123; -webkit-tap-highlight-color:transparent;&#125; 鼠标放上出现一个白色的框(带动画)1234567891011121314151617181920/* 默认样式 -- 不显示 */.border:before &#123; content: &#x27;&#x27;; position: absolute; left: 10px; top: 10px; right: 10px; bottom: 10px; box-sizing: border-box; border: 3px solid #FFFFFF; transform: scale(0); opacity: 0; transition: all .3s cubic-bezier(0.4,0,0.2,1) 0s;&#125;/* hover时改变 */.border:hover:before &#123; transform: scale(1); opacity: 1;&#125; 效果图 flex布局实现简单的瀑布流html部分 1234567891011121314151617181920212223&lt;!-- 这里需要将文档结构处理成类似的结构 --&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;container-item&quot;&gt; &lt;img src=&quot;*&amp;^%^%&amp;%*&amp;*&quot; /&gt; &lt;h4&gt;标题1&lt;/h4&gt; &lt;p&gt;这是item1的描述信息&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;container-item&quot;&gt; &lt;img src=&quot;*&amp;^%^%&amp;%*&amp;*&quot; /&gt; &lt;h4&gt;标题2&lt;/h4&gt; &lt;p&gt;这是item2的描述信息&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;container-item&quot;&gt; &lt;img src=&quot;*&amp;^%^%&amp;%*&amp;*&quot; /&gt; &lt;h4&gt;标题3&lt;/h4&gt; &lt;p&gt;这是item3的描述信息&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;container-item&quot;&gt; &lt;img src=&quot;*&amp;^%^%&amp;%*&amp;*&quot; /&gt; &lt;h4&gt;标题4&lt;/h4&gt; &lt;p&gt;这是item4的描述信息&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; css部分 12345678910111213.container &#123; width: 750rpx; margin: 0 auto; column-count: 4; /* 瀑布流的列数 */ column-gap: 0; /* 每列之间的间距 如： 10px;*/ &amp;-item &#123; display: flex; flex-direction: column; justify-content: center; align-items: center; &#125;&#125;","categories":[{"name":"开发","slug":"开发","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"开发/前端","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"开发/前端/CSS","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"开发","slug":"开发","permalink":"http://example.com/tags/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"}]},{"title":"JS常用工具类汇总(持续更新....)","slug":"JS常用工具类汇总(持续完善...)","date":"2021-06-29T11:41:45.000Z","updated":"2021-10-05T07:01:17.685Z","comments":true,"path":"post/535a.html","link":"","permalink":"http://example.com/post/535a.html","excerpt":"整理项目开发中经常使用的js片段","text":"整理项目开发中经常使用的js片段 创建a标签,打开新页面1234567891011121314151617181920/** * 创建a标签,打开新页面 openURL() * @param &#123;String&#125; url 目标地址 * @returns null */function openURL(url) &#123; let aLabel = document.createElement(&#x27;a&#x27;); //设置链接 aLabel.setAttribute(&#x27;href&#x27;, url); //新窗口打开链接 aLabel.setAttribute(&#x27;target&#x27;, &#x27;_blank&#x27;); //设置标签ID aLabel.setAttribute(&#x27;id&#x27;, &#x27;reportpoint&#x27;); // 防止反复添加 if (document.getElementById(&#x27;reportpoint&#x27;)) &#123; document.body.removeChild(document.getElementById(&#x27;reportpoint&#x27;)); &#125; document.body.appendChild(aLabel); aLabel.click();&#125; 防抖函数防抖函数的原理就是通过延时器控制用户在短时间内进行重复操作的时候取消上一次操作 防抖函数123456789101112131415161718/** * 防抖函数 debounce() * @param &#123;function&#125; fn 事件触发的操作 * @param &#123;number&#125; delay 多少毫秒内连续触发事件，不会执行 * @returns &#123;Function&#125; */function debounce(fn, delay) &#123; let timer = null ; return function() &#123; let self = this ; // 注意this指向 args = arguments; // 拿到函数的入参 timer &amp;&amp; clearTimeout(timer); timer = setTimeout(() =&gt; &#123; fn.apply(self, args); &#125;, delay) &#125;&#125; 如何使用？1234567// 假设现有以下点击事件，clickEvent()let input1 = document.getElementById(&#x27;input1&#x27;);input1.addEventListener(&#x27;keyup&#x27;,debounce(action1,1000))function action1() &#123; console.log(input1.value)&#125; 节流函数节流函数的原理就是通过控制延时器,当高频事件触发，n秒内只会执行一次 节流函数12345678910111213141516171819202122/** * 节流函数 throttle() * @param &#123;function&#125; fn 事件触发的操作 * @param &#123;number&#125; delay 多少毫秒内连续触发事件，只会执行一次 * @returns &#123;Function&#125; */function throttle(fn, delay) &#123; let timer = null ; let flag = true ; // 当前是否正在执行... return function() &#123; if (!flag) return flag = false; let self = this ; // 注意this指向 args = arguments; // 拿到函数的入参 timer &amp;&amp; clearTimeout(timer); timer = setTimeout(() =&gt; &#123; flag = true; // 时间到了，可以继续执行下一次事件 fn.apply(self, args); &#125;, delay) &#125;&#125; 使用的规则同 防抖函数 将字符串运行成js脚本的几种方式123451. eval(&#x27;字符串&#x27;)2. new Function(&#x27;字符串&#x27;)3. setTimeout(&#x27;字符串&#x27;, 1000)4. setInterval(&#x27;字符串&#x27;, 1000) 浏览器复制内容到剪切板123456789101112131415161718192021/** * 浏览器复制内容到剪切板 copyText() * @param &#123;string&#125; text 需要复制的内容 * @returns null */const copyText = (text)=&gt;&#123; var range = document.createRange(); var copyDOM = document.createElement(&#x27;a&#x27;); copyDOM.innerHTML = text; window.getSelection().removeAllRanges(); document.body.appendChild(copyDOM) range.selectNode(copyDOM); window.getSelection().addRange(range); var successful = document.execCommand(&#x27;copy&#x27;); if(successful)&#123; // 复制成功到剪切板 &#125;else&#123; // 复制失败，一般是因为浏览器不支持复制 &#125; document.body.removeChild(copyDOM)&#125; 取随机字符串取随机字符串根据业务的不同会有不一样的取值方式，用作签名的一部分、用做随机密码….这里我采用的是获取长度不定、去除容易混淆的字符oOLl,9gq,Vv,Uu,I1的随机位数的随机字符 123456789101112131415/** * 取随机字符串 randomString() * @param &#123;number&#125; len 随机字符串的长度 * @returns null */function randomString(len) &#123; len = len || 32; // 默认随机生成32位长度字符串 var $chars = &#x27;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678&#x27;; /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/ var maxPos = $chars.length; var randomStr = &#x27;&#x27;; for (var i = 0; i &lt; len; i++) &#123; randomStr += $chars.charAt(Math.floor(Math.random() * maxPos)); &#125; return randomStr;&#125;","categories":[{"name":"开发","slug":"开发","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"开发/前端","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"},{"name":"JS","slug":"开发/前端/JS","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/JS/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://example.com/tags/JS/"},{"name":"开发","slug":"开发","permalink":"http://example.com/tags/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"hexo + volantis 搭建个人博客?","slug":"如何搭建个人博客","date":"2021-06-25T05:36:46.000Z","updated":"2021-09-30T07:52:25.723Z","comments":true,"path":"post/9487.html","link":"","permalink":"http://example.com/post/9487.html","excerpt":"使用hexo搭建个人博客","text":"使用hexo搭建个人博客 搭建博客的框架很多，个人比较偏向于hexo框架： hexo只需要专注于写文档而不需要过分担心别的问题。 hexo比较成熟，如果遇到问题也可以得到很好的解决。 hexo使用github pages进行部署，不需要购买自己的服务器就可以部署到线上。 hexo有很好的主题，如：volantis， yilia…. hexo中文网站 volantis主题官方文档 1. 搭建hexo环境 hexo是基于node开发的，首先需要安装node ，其次如果想要部署到github pages 需要安装git 安装淘宝镜像1sudo npm install -g cnpm --registry=https://registry.npm.taobao.org 安装hexo-cli1sudo cnpm install -g hexo-cli 检查是否安装成功1hexo -v 2. 创建hexo项目首先创建一个空的文件夹用于存放hexo项目代码，并在创建的目录中打开终端 1234567mkdir &lt;floder&gt;cd &lt;floder&gt;hexo init// 或者直接借助hexo去实现hexo init &lt;floder&gt; // 这里hexo会自动创建文件夹并初始化项目 安装依赖 1npm install 3. 启动项目启动项目常用的命令 123hexo clean // 清除项目中的临时文件hexo g // OR hexo generate 生成临时文件hexo s // OR hexo start 启动项目 此时页面可以看到一个默认的博客模板并且有一篇默认的hello world 文章 4. 新建一篇文章1hexo new &quot;如何搭建个人博客&quot; 5. 切换自己喜欢的主题这里以Volantis主题为例，具体的主题需要参照具体的官方文档来做 下载主题插件 1npm i hexo-theme-volantis 修改_config.yml中的 theme 字段为volantis 1theme: volantis 安装 Hexo 搜索的依赖包 1npm i hexo-generator-search hexo-generator-json-content 安装 Stylus 渲染器 1npm i hexo-renderer-stylus 这样就可以看到精美的主题啦，之后的细节慢慢去调试成自己喜欢的样子（参考对应的官方文档） 6. 部署到github pages第一步： 在github上新建一个仓库，仓库的名字为：&lt;用户名&gt;.github.io （必须） 第二步： 修改项目根目录下的_config.yml中的 deploy 字段为： 1234deploy: type: git repo: // 这里修改成自己的github仓库地址 branch: master 第三步： 将代码部署到github pages 123hexo cleanhexo g // OR hexo generatehexo d // OR hexo deploy 此时控制台会报错：ERROR Deployer not found: git这是因为项目缺少git部署的插件 1npm install --save hexo-deployer-git 执行以上的语句即可～～～～～～～然后重复第三步此时就可以看到git仓库中已经有了一部分代码,神奇的是：此时去访问：&lt;用户名&gt;.github.io 就可以看到线上的博客样式了。 github pages demo, JingTao-Li.github.io, 7. 修改github page 为自定义的域名点击解析，添加对应的IP地址和CNAME然后在当前项目的 source/ 目录下创建一个名叫 CNAME 的文件，里面的内容就是你的域名地址。接着重新部署一下就可以了。 8. 如何在项目中引入本地图片第一步：安装插件： 1npm install hexo-asset-image --save 第二步：打开根目录下的 _config.yml 文件，修改 post_asset_folder 字段为 true 第三步：打开 /node_modules/hexo-asset-image/index.js 文件，替换为以下代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&#x27;use strict&#x27;;var cheerio = require(&#x27;cheerio&#x27;);// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) &#123; return str.split(m, i).join(m).length;&#125;var version = String(hexo.version).split(&#x27;.&#x27;);hexo.extend.filter.register(&#x27;after_post_render&#x27;, function(data)&#123; var config = hexo.config; if(config.post_asset_folder)&#123; var link = data.permalink; if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3) var beginPos = getPosition(link, &#x27;/&#x27;, 1) + 1; else var beginPos = getPosition(link, &#x27;/&#x27;, 3) + 1; // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;. var endPos = link.lastIndexOf(&#x27;/&#x27;) + 1; link = link.substring(beginPos, endPos); var toprocess = [&#x27;excerpt&#x27;, &#x27;more&#x27;, &#x27;content&#x27;]; for(var i = 0; i &lt; toprocess.length; i++)&#123; var key = toprocess[i]; var $ = cheerio.load(data[key], &#123; ignoreWhitespace: false, xmlMode: false, lowerCaseTags: false, decodeEntities: false &#125;); $(&#x27;img&#x27;).each(function()&#123; if ($(this).attr(&#x27;src&#x27;))&#123; // For windows style path, we replace &#x27;\\&#x27; to &#x27;/&#x27;. var src = $(this).attr(&#x27;src&#x27;).replace(&#x27;\\\\&#x27;, &#x27;/&#x27;); if(!/http[s]*.*|\\/\\/.*/.test(src) &amp;&amp; !/^\\s*\\//.test(src)) &#123; // For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed. // In addition, to support multi-level local directory. var linkArray = link.split(&#x27;/&#x27;).filter(function(elem)&#123; return elem != &#x27;&#x27;; &#125;); var srcArray = src.split(&#x27;/&#x27;).filter(function(elem)&#123; return elem != &#x27;&#x27; &amp;&amp; elem != &#x27;.&#x27;; &#125;); if(srcArray.length &gt; 1) srcArray.shift(); src = srcArray.join(&#x27;/&#x27;); $(this).attr(&#x27;src&#x27;, config.root + link + src); console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src); &#125; &#125;else&#123; console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;); console.info&amp;&amp;console.info($(this)); &#125; &#125;); data[key] = $.html(); &#125; &#125;&#125;); 第四步：之后在新建一个新的文档内容的时候会自动生成一个同名文件夹，里面就可以放本页面需要的图片源文件，在需要的地方引入： 1![这是代替图片的文字，随便写](图片名字)","categories":[{"name":"搭建个人博客","slug":"搭建个人博客","permalink":"http://example.com/categories/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"搭建","slug":"搭建","permalink":"http://example.com/tags/%E6%90%AD%E5%BB%BA/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-06-22T11:41:45.000Z","updated":"2021-09-30T08:26:11.847Z","comments":true,"path":"post/3eeb.html","link":"","permalink":"http://example.com/post/3eeb.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"JS","slug":"JS","permalink":"http://example.com/categories/JS/"},{"name":"开发","slug":"JS/开发","permalink":"http://example.com/categories/JS/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"JS/开发/前端","permalink":"http://example.com/categories/JS/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"},{"name":"开发","slug":"开发","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"开发/前端","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"开发/前端/CSS","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/CSS/"},{"name":"JS","slug":"开发/前端/JS","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/JS/"},{"name":"搭建个人博客","slug":"搭建个人博客","permalink":"http://example.com/categories/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://example.com/tags/JS/"},{"name":"开发","slug":"开发","permalink":"http://example.com/tags/%E5%BC%80%E5%8F%91/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"CSS","permalink":"http://example.com/tags/CSS/"},{"name":"博客","slug":"博客","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"搭建","slug":"搭建","permalink":"http://example.com/tags/%E6%90%AD%E5%BB%BA/"}]}