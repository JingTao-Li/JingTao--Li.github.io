<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于跨域，我想说.....</title>
    <link href="/post/9ff3.html"/>
    <url>/post/9ff3.html</url>
    
    <content type="html"><![CDATA[<h2 id="什么是跨域？什么是浏览器同源政策？"><a href="#什么是跨域？什么是浏览器同源政策？" class="headerlink" title="什么是跨域？什么是浏览器同源政策？"></a>什么是跨域？什么是浏览器同源政策？</h2><blockquote><p> 跨域：<br>​      浏览器可能存放用户信息，为了保护用户信息，禁止非同源请求来获取本网站的信息，为了解决同源限制所作出的行为叫做跨域。<br> 同源政策:<br>   两个ip地址，只有符合以下三个条件时才可以叫做同源，同源的地址之间互相访问不存在跨域问题；<br>   1.协议相同<br>   2.域名相同<br>   3.端口相同<br>   只要有一个条件不符合，就会发生跨域问题。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">http:<span class="hljs-comment">//www.baidu.com/a   //http:默认端口是8080</span><br>https:<span class="hljs-comment">//www.baidu/com/b  //https:默认端口是443</span><br>A.同源 B.不同源，协议不同 C.不同源，端口不同 &#123;D.不同源，协议和端口不同&#125;<br></code></pre></div></td></tr></table></figure><h2 id="跨域方式有哪些？"><a href="#跨域方式有哪些？" class="headerlink" title="跨域方式有哪些？"></a>跨域方式有哪些？</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>xhr.open(<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;https://suggest.taobao.com/sug?code=utf-8&amp;q=%E8%BE%A3%E6%9D%A1&quot;</span>);<br>xhr.send();<br><br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(xhr.readyState == <span class="hljs-number">4</span>)&#123;<br>         <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>       &#125;<br>&#125;<br><span class="hljs-comment">//这里会显示出现跨域阻止</span><br></code></pre></div></td></tr></table></figure><h3 id="跨域问题的第一种解决方式"><a href="#跨域问题的第一种解决方式" class="headerlink" title="跨域问题的第一种解决方式"></a>跨域问题的第一种解决方式</h3><p>这里以自己搭建的淘宝和京东后台模拟为例</p><ul><li>1.淘宝</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//淘宝----------前端js代码</span><br><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br><span class="hljs-comment">//这里默认的请求地址是 http://localhost:8080/getInfo</span><br><span class="hljs-comment">// xhr.open(&quot;get&quot;,&quot;/getInfo&quot;);</span><br><span class="hljs-comment">//现在想要请求京东的资源</span><br>xhr.open(<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;http://localhost:9000/getInfo&quot;</span>);<br>xhr.send();<br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">if</span>(xhr.readyState == <span class="hljs-number">4</span>)&#123;<br>    <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;span&quot;</span>).innerText = xhr.responseText;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//淘宝----------后端js代码</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> web = express();<br>web.use(express.static(<span class="hljs-string">&quot;public&quot;</span>));<br><br>web.get(<span class="hljs-string">&quot;/getInfo&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req,res</span>)</span>&#123;<br>  <span class="hljs-keyword">const</span> goodList = [<br>    &#123;<br>      <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;雷神电脑&quot;</span>,<br>      <span class="hljs-attr">price</span> : <span class="hljs-number">9999</span><br>    &#125;,&#123;<br>      <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;苹果手机&quot;</span>,<br>      <span class="hljs-attr">price</span> : <span class="hljs-number">6999</span><br>    &#125;,&#123;<br>      <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;耐克球鞋&quot;</span>,<br>      <span class="hljs-attr">price</span> : <span class="hljs-number">999</span><br>    &#125;<br>  ];<br>  res.send(goodList);<br>&#125;)<br><br>web.listen(<span class="hljs-string">&quot;8080&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;8080端口启动&quot;</span>);<br>&#125;)<br></code></pre></div></td></tr></table></figure><ul><li>京东</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//京东----------前端js代码 和淘宝的一致</span><br><span class="hljs-comment">//京东请求自己网站的数据，没有同源限制也就没有跨域问题</span><br><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>  xhr.open(<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;/getInfo&quot;</span>);<br>  xhr.send();<br>  xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(xhr.readyState == <span class="hljs-number">4</span>)&#123;<br>      <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>      <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;span&quot;</span>).innerText = xhr.responseText;<br>    &#125;<br>  &#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//京东----------后端js代码</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> web = express();<br>web.use(express.static(<span class="hljs-string">&quot;public&quot;</span>));<br><br>web.get(<span class="hljs-string">&quot;/getInfo&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req,res</span>)</span>&#123;<br>  <span class="hljs-comment">//-------------------------------------------------------- </span><br>  res.set(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;http://localhost:8080&quot;</span>)<br>  <span class="hljs-comment">//-------------------------------------------------------- </span><br>  <span class="hljs-keyword">const</span> bookList = [<br>    &#123;<br>      <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;海王&quot;</span>,<br>      <span class="hljs-attr">price</span> : <span class="hljs-number">99.99</span><br>    &#125;,&#123;<br>      <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;海贼王&quot;</span>,<br>      <span class="hljs-attr">price</span> : <span class="hljs-number">699</span><br>    &#125;,&#123;<br>      <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;海尔兄弟&quot;</span>,<br>      <span class="hljs-attr">price</span> : <span class="hljs-number">111</span><br>    &#125;<br>  ];<br>  res.send(bookList);<br>&#125;)<br><br>web.listen(<span class="hljs-string">&quot;9000&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;9000端口启动&quot;</span>);<br>&#125;)<br></code></pre></div></td></tr></table></figure><blockquote><p>在这里，淘宝网站想要请求京东网站的资源时，发生了跨域请求。如果没有解决这个问题是没法请求到京东的数据的。</p><p>这里就有了第一种解决的方案，在京东的后端接口中声明，</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">res.set(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;希望可以被请求的地址&quot;</span>)  <br><span class="hljs-comment">//这里可以写* 代表所有的不同源的网站</span><br></code></pre></div></td></tr></table></figure></blockquote><p>总结：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">这里请求京东的资源会发生跨域请求,由于浏览器的同源限制，会拦截跨域请求<br>*  控制台输出：<br>*    已拦截跨源请求：同源策略禁止读取位于 http:<span class="hljs-comment">//localhost:9000/getInfo 的远程资源。</span><br>*    （原因：CORS 头缺少 <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>）。<br>*  只需要在对应的接口中设置：<br>*    res.set(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;希望可以被请求的地址&quot;</span>)  这里可以写* 代表所有的不同源的网站<br></code></pre></div></td></tr></table></figure><h3 id="跨域问题的第二种解决方式"><a href="#跨域问题的第二种解决方式" class="headerlink" title="跨域问题的第二种解决方式"></a>跨域问题的第二种解决方式</h3><blockquote><p>问题剖析：</p><p>​    跨域问题最根本产生的原因就是浏览器为了保护用户信息而设置了同源限制，只有同源的情况下才可以访问数据。同源限制也只是在浏览器中存在，在app等环境下运行就不会有同源限制，所以只需要想办法让请求发生不在浏览器中就可以。这里可以使用后台来请求外部资源，然后再返回给前端就可以解决跨域问题。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 前端代码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>请输入您要查询的关键字：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;getInfo()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> keywords = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;input&quot;</span>).value;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="javascript">    <span class="hljs-comment">//现在想要请求动态的资源,链接中的q参数是可变的，传入一个参数给后端</span></span><br><span class="javascript">    xhr.open(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;/getInfo?keyWords=&quot;</span> + keywords);</span><br><span class="javascript">    xhr.send();</span><br><span class="javascript">    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span>) &#123;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;span&quot;</span>).innerText = xhr.responseText;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> web = express();<br>web.use(express.static(<span class="hljs-string">&quot;public&quot;</span>));<br><span class="hljs-keyword">const</span> https = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;https&quot;</span>)<br><br>web.get(<span class="hljs-string">&quot;/getInfo&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> keywords = req.query.keyWords; <span class="hljs-comment">// 这个keywords是一个汉字字符,拼接成的url是带有中文的，需要编码</span><br>  <span class="hljs-keyword">let</span> url = <span class="hljs-string">&quot;https://suggest.taobao.com/sug?code=utf-8&amp;q=&quot;</span> + keywords;<br>  <span class="hljs-comment">//https请求不能解析带有中文的地址</span><br>  url = <span class="hljs-built_in">encodeURI</span>(url);<br>  <span class="hljs-comment">//在这里请求外部数据</span><br>  <span class="hljs-comment">//请求淘宝的一个搜索关键字的资源</span><br>  https.get(url, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">httpsRes</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> bufferData = <span class="hljs-string">&quot;&quot;</span>;<br>    httpsRes.on(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>      bufferData += data;<br>    &#125;);<br>    httpsRes.on(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-comment">//此时bufferData是一个buffer类型的数据</span><br>      bufferData = <span class="hljs-built_in">JSON</span>.parse(bufferData);<br>      <span class="hljs-comment">//将拼接到的资源返回给前端</span><br>      res.send(bufferData);<br>    &#125;)<br>  &#125;)<br>&#125;)<br><br>web.listen(<span class="hljs-string">&quot;8080&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;8080端口启动&quot;</span>);<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="跨域问题的第三种解决方式"><a href="#跨域问题的第三种解决方式" class="headerlink" title="跨域问题的第三种解决方式"></a>跨域问题的第三种解决方式</h3><blockquote><p>在以往的html中，也有请求外部资源的时候</p></blockquote><p>比如：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;地址&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;地址&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;地址&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;地址&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>这些请求都可以请求成功，说明浏览器对于标签的外部资源请求是没有限制的，那么我们使用标签的形式进行请求跨域资源。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myCallBack</span>(<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">    <span class="hljs-comment">//data里面存放了&#123;result:[Array(数据)]&#125;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://suggest.taobao.com/sug?code=utf-8&amp;q=%E8%BE%A3%E6%9D%A1&amp;callback=myCallBack&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>在标签中进行跨域请求就不需要在接口中增加一行 res.set(“Access-Control-Allow-Origin”,”允许的对象”)<br>也不需要通过后台的方式进行跨域请求<br>只需要在标签中声明请求的目标资源地址就可以了，更加方便</p><p>但是这种方式也有一个问题：<br>    怎么才能得到请求到的资源?<br>    这里需要给请求的资源地址后面添加一个callback 回调函数</p></blockquote><h3 id="跨域问题的第四个解决方式"><a href="#跨域问题的第四个解决方式" class="headerlink" title="跨域问题的第四个解决方式"></a>跨域问题的第四个解决方式</h3><blockquote><p>搭配jquery中的dataType : jsonp解决跨域问题</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./jQuery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  $.ajax(&#123;</span><br><span class="javascript">    <span class="hljs-attr">url</span> : <span class="hljs-string">&quot;https://suggest.taobao.com/sug?code=utf-8&amp;q=%E8%BE%A3%E6%9D%A1&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">type</span> : <span class="hljs-string">&quot;get&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">dataType</span> : <span class="hljs-string">&quot;jsonP&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">success</span>(<span class="hljs-params">res</span>)</span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(res.result)</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="跨域问题的第五个解决方式（vue）"><a href="#跨域问题的第五个解决方式（vue）" class="headerlink" title="跨域问题的第五个解决方式（vue）"></a>跨域问题的第五个解决方式（vue）</h3><p>下面的例子中创建一个home.vue组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;button @click=&quot;sendQuest&quot;&gt;发送跨域请求&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 这里需要安装axios模块 npm install axios<br>import axios from &quot;axios&quot;<br><br>export default &#123;<br>  name: &quot;home&quot;,<br>  methods: &#123;<br>    sendQuest() &#123;<br>      // 这里发生了跨域请求，请求不到数据。在config/index中进行配置<br>      // axios.get(&quot;https://suggest.taobao.com/sug?code=utf-8&amp;q=%E9%A6%99%E6%B0%B4&quot;)<br>      axios.get(&quot;/taoBao/sug?code=utf-8&amp;q=%E9%A6%99%E6%B0%B4&quot;)<br>      .then(function (data) &#123;<br>        // 请求成功<br>        console.log(data);<br>      &#125;,function (err) &#123;<br>        // 请求错误<br>        console.log(err);<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br>&lt;!-- 当点击按钮的时候进行数据跨域请求， --&gt;<br></code></pre></div></td></tr></table></figure><p>在config/index.js/dev/proxyTable中进行配置：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// proxy 代理  table 表  代理表 </span><br><span class="hljs-comment">// vue当中使用代理表进行跨域  （反向代理）</span><br><span class="hljs-comment">// 代理表跨域 是把url当中相同的部分截取出来</span><br><span class="hljs-attr">proxyTable</span>: &#123;<br>  <span class="hljs-string">&#x27;/taoBao&#x27;</span>:&#123;<br>    <span class="hljs-comment">// target目标</span><br>     <span class="hljs-attr">target</span>:<span class="hljs-string">&quot;https://suggest.taobao.com&quot;</span> , <br>    <span class="hljs-comment">//  是否改变请求源</span><br>     <span class="hljs-attr">changeOrigin</span>:<span class="hljs-literal">true</span> , <br>    <span class="hljs-comment">//  路径重写</span><br>     <span class="hljs-attr">pathRewrite</span>:&#123;<br>        <span class="hljs-string">&#x27;^/taoBao&#x27;</span>:<span class="hljs-string">&quot;&quot;</span><br>     &#125;<br>  &#125;<br>&#125;,<br></code></pre></div></td></tr></table></figure><blockquote><p>这样就可以实现vue中的跨域请求</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>前端</tag>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端常见面试题积累</title>
    <link href="/post/f36c.html"/>
    <url>/post/f36c.html</url>
    
    <content type="html"><![CDATA[<p>分享个人面试过程中常见的问题，也包含自己对问题的理解。不断完善…..</p><span id="more"></span><!-- ########################## 1.在js中当对象使用new关键字的时候，程序内部都做了什么？ ########################## --><h3 id="new关键字的原理"><a href="#new关键字的原理" class="headerlink" title="new关键字的原理"></a>new关键字的原理</h3><p>当对象使用new关键字创建的时候，程序内部都做了什么？<br>&nbsp;&nbsp;&nbsp;1.开辟内存地址，里面放置一个空的对象<br>&nbsp;&nbsp;&nbsp;2.this指向了空的对象<br>&nbsp;&nbsp;&nbsp;3.构造函数的参数给空的对象赋值<br>&nbsp;&nbsp;&nbsp;4.将赋值后的对象返回给外面使用</p><hr><!-- ########################## 1.end ########################## --><!-- ########################## 2.跨域问题 ########################## --><h3 id="跨域的产生原因和如何解决？"><a href="#跨域的产生原因和如何解决？" class="headerlink" title="跨域的产生原因和如何解决？"></a>跨域的产生原因和如何解决？</h3><p>关于跨域，我想要整理一篇独立的文章去解释的理解，这里直接链接到 <a href="/post/9ff3.html">关于跨域，我想说…..</a></p><!-- *** -->]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>前端</tag>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>filter、map、reduce的使用</title>
    <link href="/post/4109.html"/>
    <url>/post/4109.html</url>
    
    <content type="html"><![CDATA[<p>在项目开发中，会有大量的对数组、对象的操作，合理地利用部分高阶函数会让你的代码看起来更加优雅。</p><span id="more"></span><!-- ############################################## 1. filter、map、reduce的使用 ############################################## --><p>直接使用一个小的案例去说明他们的关系：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">111</span>,<span class="hljs-number">444</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>];<br><span class="hljs-comment">// 对于数据nums现有三个需求：</span><br>    <span class="hljs-comment">// 1.取出所有小于100的数字 </span><br>    <span class="hljs-comment">// 2.将所有小于100的数字进行转化 --乘以2</span><br>    <span class="hljs-comment">// 3.将所有的newNums2数字相加得到最后的结果。</span><br></code></pre></div></td></tr></table></figure><h2 id="使用普通for循环去处理以上需求"><a href="#使用普通for循环去处理以上需求" class="headerlink" title="使用普通for循环去处理以上需求"></a>使用普通for循环去处理以上需求</h2><blockquote><p>需求1：取出所有小于100的数字 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> newNums = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> n <span class="hljs-keyword">of</span> nums) &#123;<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">100</span>) &#123;<br>        newNums.push(n);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>需求2： 将所有小于100的数字进行转化 –乘以2</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> newNums2 = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> n <span class="hljs-keyword">of</span> newNums) &#123;<br>    newNums2.push(n * <span class="hljs-number">2</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>需求3： 将所有的newNums2数字相加得到最后的结果。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> n <span class="hljs-keyword">of</span> newNums2) &#123;<br>    total += n;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="filter-map-reduce-完成以上需求"><a href="#filter-map-reduce-完成以上需求" class="headerlink" title="filter / map / reduce  完成以上需求"></a>filter / map / reduce  完成以上需求</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//需求1：取出所有小于100的数字</span><br>nums.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-comment">//filter中的回调函数有一个要求：必须返回一个boolean值</span><br>    <span class="hljs-comment">//当返回true时，函数内部会自动将本次回调的n加入到一个新的数组中</span><br>    <span class="hljs-comment">//当返回为false时，函数内部会过滤掉这次的n</span><br>    <span class="hljs-keyword">return</span> n &lt; <span class="hljs-number">100</span>; <span class="hljs-comment">//这里就可以直接满足第一个需求</span><br>&#125;); <br><span class="hljs-comment">//这里会返回一个新的数组，就是包含nums中所有值小于100的新数组</span><br><span class="hljs-keyword">let</span> newNums = nums.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> n &lt; <span class="hljs-number">100</span>;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(newNums); <span class="hljs-comment">// [10,20,40,50]</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//需求2： 将所有小于100的数字进行转化 --乘以2</span><br><span class="hljs-keyword">let</span> newNums2 = newNums.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> n * <span class="hljs-number">2</span> ;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(newNums2); <span class="hljs-comment">// [20,40,80,100]</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//需求3：将所有的newNums2数字相加得到最后的结果</span><br><span class="hljs-comment">//reduce作用：对数组中所有的内容进行汇总</span><br>newNums2.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">preValue , n</span>) </span>&#123;<br>    <span class="hljs-comment">//preValue 是上一次返回的值</span><br>    <span class="hljs-comment">//return 100; //对应下面的过程</span><br>    <span class="hljs-keyword">return</span> preValue + n;<br>&#125;,<span class="hljs-number">0</span>)<br><span class="hljs-comment">//reduce(参数1，参数2); 会返回最后汇总的结果; 参数1：整合数据操作、参数2：初始值</span><br><span class="hljs-comment">//这里面的function会执行4次，</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">第一次： preValue-&gt;0 ; n -&gt; 20;</span><br><span class="hljs-comment">第二次： preValue-&gt;100 ; n -&gt;40;</span><br><span class="hljs-comment">第二次： preValue-&gt;100 ; n -&gt;80;</span><br><span class="hljs-comment">第二次： preValue-&gt;100 ; n -&gt;100;</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><blockquote><p>计算最终的结果</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> total = nums.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> n &lt; <span class="hljs-number">100</span>;<br>&#125;).map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> n * <span class="hljs-number">2</span>;<br>&#125;).reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">preValue , n</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> preValue + n;<br>&#125;,<span class="hljs-number">0</span>)<br></code></pre></div></td></tr></table></figure><p>这样的话就很好的简化了代码，逻辑也会更加清楚。<br>什么？还是不够简化？那下面的代码呢？</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> total = nums.filter(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n &lt; <span class="hljs-number">100</span>).map(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n * <span class="hljs-number">2</span>).reduce(<span class="hljs-function">(<span class="hljs-params">preValue,n</span>) =&gt;</span> preValue + n);<br><span class="hljs-built_in">console</span>.log(total); <span class="hljs-comment">// total = 240;</span><br></code></pre></div></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div>            <input type="checkbox" disabled checked="checked">filter: 对数组进行过滤，当返回值为true时，才会返回当前处理的元素。          </div><div>            <input type="checkbox" disabled checked="checked">map: 映射，可以对数组中每个元素进行操作，并逐一返回，生成一个新的数组。          </div><div>            <input type="checkbox" disabled checked="checked">reduce: 接收一个函数作为累加器，数组中的每个值（从左到右）开始合并，最终返回一个值。          </div><div class="note note-secondary">            <p>reduce可接收的参数: reduce((参数1,参数2,参数3,参数4) =&gt; {}, 参数5)<br>&nbsp;&nbsp;参数1. previousValue(上一次调用回调函数返回的值，或者是提供的初始值（initialValue）)<br>&nbsp;&nbsp;参数2. currentValue(数组中当前被处理的元素)<br>&nbsp;&nbsp;参数3. index（当前元素在数组中的索引）<br>&nbsp;&nbsp;参数4. array（调用reduce的数组）<br>并且reduce可以传入一个初始值（参数5），初始值的格式随意定义，如果不传，默认是previousValue</p>          </div><!-- *** --><!-- ############################################## 1. end ############################################## -->]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>开发</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>那些开发中的css技巧</title>
    <link href="/post/cc46.html"/>
    <url>/post/cc46.html</url>
    
    <content type="html"><![CDATA[<p>在开发中合理利用css，可以大大提高开发效率</p><span id="more"></span><h3 id="去除safari浏览器输入框的小图标以及密码输入的钥匙图标"><a href="#去除safari浏览器输入框的小图标以及密码输入的钥匙图标" class="headerlink" title="去除safari浏览器输入框的小图标以及密码输入的钥匙图标"></a>去除safari浏览器输入框的小图标以及密码输入的钥匙图标</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 去掉Safari浏览器下密码输入框自带的小钥匙图标 */</span><br><span class="hljs-selector-tag">input</span>::-webkit-credentials-auto-fill-button &#123;<br>  display: none <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">visibility</span>: hidden;<br>  <span class="hljs-attribute">pointer-events</span>: none;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 去掉safari浏览器input右边的小图标/小按钮 */</span><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span>::-webkit-contacts-auto-fill-button&#123;<br>  opacity: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="调整浏览器滚动条的样式"><a href="#调整浏览器滚动条的样式" class="headerlink" title="调整浏览器滚动条的样式"></a>调整浏览器滚动条的样式</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/</span><br>::-webkit-scrollbar &#123;<br>  /* width: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">5px</span>; */<br>&#125;<br><br><span class="hljs-comment">/*定义滚动条轨道 内阴影+圆角*/</span><br>::-webkit-scrollbar-track &#123;<br>  border-radius: <span class="hljs-number">999px</span>;<br>  <span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span> solid transparent;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,.<span class="hljs-number">2</span>) inset;<br>&#125;<br><br><span class="hljs-comment">/*定义滑块 内阴影+圆角*/</span><br>::-webkit-scrollbar-thumb &#123;<br>  border-radius: <span class="hljs-number">999px</span>;<span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span> solid transparent;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">background-clip</span>: content-box;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,.<span class="hljs-number">5</span>) inset;<br>  -webkit-<span class="hljs-attribute">box-shadow</span>:<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,.<span class="hljs-number">5</span>) inset;<br>&#125;<br><br>::-webkit-scrollbar-corner &#123;<br>  background:transparent;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="毛玻璃效果"><a href="#毛玻璃效果" class="headerlink" title="毛玻璃效果"></a>毛玻璃效果</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">hsla</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0%</span>, <span class="hljs-number">100%</span>, .<span class="hljs-number">75</span>);<br>  -webkit-backdrop-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">5px</span>);    <br>  backdrop-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">5px</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="手机端点开多选框出现蓝色块"><a href="#手机端点开多选框出现蓝色块" class="headerlink" title="手机端点开多选框出现蓝色块"></a>手机端点开多选框出现蓝色块</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">* &#123;<br>  -webkit-tap-highlight-<span class="hljs-attribute">color</span>:transparent;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="鼠标放上出现一个白色的框-带动画"><a href="#鼠标放上出现一个白色的框-带动画" class="headerlink" title="鼠标放上出现一个白色的框(带动画)"></a>鼠标放上出现一个白色的框(带动画)</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 默认样式 -- 不显示 */</span><br><span class="hljs-selector-class">.border</span>:before &#123;<br>  content: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#FFFFFF</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">3s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">1</span>) <span class="hljs-number">0s</span>;<br>&#125;<br><br><span class="hljs-comment">/* hover时改变 */</span><br><span class="hljs-selector-class">.border</span><span class="hljs-selector-pseudo">:hover</span>:before &#123;<br>  transform: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>效果图</strong><br><img src="https://myblogger-1305472061.cos.ap-shanghai.myqcloud.com/%E9%82%A3%E4%BA%9B%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84css%E6%8A%80%E5%B7%A7/border-animation.gif" alt="边框效果图"></p><hr><h3 id="flex布局实现简单的瀑布流"><a href="#flex布局实现简单的瀑布流" class="headerlink" title="flex布局实现简单的瀑布流"></a>flex布局实现简单的瀑布流</h3><p><strong>html部分</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这里需要将文档结构处理成类似的结构 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;*&amp;^%^%&amp;%*&amp;*&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是item1的描述信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;*&amp;^%^%&amp;%*&amp;*&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>标题2<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是item2的描述信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;*&amp;^%^%&amp;%*&amp;*&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>标题3<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是item3的描述信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;*&amp;^%^%&amp;%*&amp;*&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>标题4<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是item4的描述信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>css部分</strong></p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">750</span>rpx;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">column-count</span>: <span class="hljs-number">4</span>; <span class="hljs-comment">/* 瀑布流的列数 */</span><br>  <span class="hljs-attribute">column-gap</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">/* 每列之间的间距 如： 10px;*/</span><br><br>  &amp;-item &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-direction</span>: column;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>前端</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS常用工具类汇总(持续更新....)</title>
    <link href="/post/535a.html"/>
    <url>/post/535a.html</url>
    
    <content type="html"><![CDATA[<p>整理项目开发中经常使用的js片段</p><span id="more"></span><!-- ############################################ 2.封装一个函数：创建a标签并打开新网页 ############################################ --><h3 id="创建a标签-打开新页面"><a href="#创建a标签-打开新页面" class="headerlink" title="创建a标签,打开新页面"></a>创建a标签,打开新页面</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建a标签,打开新页面 openURL()</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>url 目标地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns <span class="hljs-variable">null</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">openURL</span>(<span class="hljs-params">url</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> aLabel = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>);<br>  <span class="hljs-comment">//设置链接</span><br>  aLabel.setAttribute(<span class="hljs-string">&#x27;href&#x27;</span>, url);<br>  <span class="hljs-comment">//新窗口打开链接</span><br>  aLabel.setAttribute(<span class="hljs-string">&#x27;target&#x27;</span>, <span class="hljs-string">&#x27;_blank&#x27;</span>);<br>  <span class="hljs-comment">//设置标签ID</span><br>  aLabel.setAttribute(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;reportpoint&#x27;</span>);<br>  <span class="hljs-comment">// 防止反复添加</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;reportpoint&#x27;</span>)) &#123;<br>    <span class="hljs-built_in">document</span>.body.removeChild(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;reportpoint&#x27;</span>));<br>  &#125;<br>  <span class="hljs-built_in">document</span>.body.appendChild(aLabel);<br>  aLabel.click();<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><!-- ############################################ 2.end ############################################ --><!-- ############################################ 3.封装防抖函数 ############################################ --><h3 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h3><p>防抖函数的原理就是通过延时器控制用户在短时间内进行重复操作的时候取消上一次操作</p><figure class="highlight js"><figcaption><span>防抖函数</span></figcaption><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 防抖函数 debounce()</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;function&#125;</span> </span>fn 事件触发的操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> </span>delay 多少毫秒内连续触发事件，不会执行</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns <span class="hljs-type">&#123;Function&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, delay</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span> ;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> self = <span class="hljs-built_in">this</span> ; <span class="hljs-comment">// 注意this指向</span><br>    args = <span class="hljs-built_in">arguments</span>; <span class="hljs-comment">// 拿到函数的入参</span><br><br>    timer &amp;&amp; <span class="hljs-built_in">clearTimeout</span>(timer);<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      fn.apply(self, args);<br>    &#125;, delay)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><figcaption><span>如何使用？</span></figcaption><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 假设现有以下点击事件，clickEvent()</span><br><span class="hljs-keyword">let</span> input1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;input1&#x27;</span>);<br>input1.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>,debounce(action1,<span class="hljs-number">1000</span>))<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(input1.value)<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><!-- ############################################ 3.end ############################################ --><!-- ############################################ 4.封装节流函数 ############################################ --><h3 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h3><p>节流函数的原理就是通过控制延时器,当高频事件触发，n秒内只会执行一次</p><figure class="highlight js"><figcaption><span>节流函数</span></figcaption><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 节流函数 throttle()</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;function&#125;</span> </span>fn 事件触发的操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> </span>delay 多少毫秒内连续触发事件，只会执行一次</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns <span class="hljs-type">&#123;Function&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, delay</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span> ;<br>  <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span> ; <span class="hljs-comment">// 当前是否正在执行...</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!flag) <span class="hljs-keyword">return</span><br>    flag = <span class="hljs-literal">false</span>; <br>    <span class="hljs-keyword">let</span> self = <span class="hljs-built_in">this</span> ; <span class="hljs-comment">// 注意this指向</span><br>    args = <span class="hljs-built_in">arguments</span>; <span class="hljs-comment">// 拿到函数的入参</span><br><br>    timer &amp;&amp; <span class="hljs-built_in">clearTimeout</span>(timer);<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      flag = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 时间到了，可以继续执行下一次事件</span><br>      fn.apply(self, args);<br>    &#125;, delay)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用的规则同 <a href='#防抖函数'> 防抖函数 </a></p><hr><!-- ############################################ 4.end ############################################ --><!-- #################################### 5.将字符串运行成js脚本的几种方式 #################################### --><h3 id="将字符串运行成js脚本的几种方式"><a href="#将字符串运行成js脚本的几种方式" class="headerlink" title="将字符串运行成js脚本的几种方式"></a>将字符串运行成js脚本的几种方式</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-number">1.</span> <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;字符串&#x27;</span>)<br><span class="hljs-number">2.</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&#x27;字符串&#x27;</span>)<br><br><span class="hljs-number">3.</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&#x27;字符串&#x27;</span>, <span class="hljs-number">1000</span>)<br><span class="hljs-number">4.</span> <span class="hljs-built_in">setInterval</span>(<span class="hljs-string">&#x27;字符串&#x27;</span>, <span class="hljs-number">1000</span>)<br></code></pre></div></td></tr></table></figure><hr><!-- #################################### 5.end #################################### --><!-- #################################### 6.浏览器复制内容到剪切板 #################################### --><h3 id="浏览器复制内容到剪切板"><a href="#浏览器复制内容到剪切板" class="headerlink" title="浏览器复制内容到剪切板"></a>浏览器复制内容到剪切板</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 浏览器复制内容到剪切板 copyText()</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> </span>text 需要复制的内容</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns <span class="hljs-variable">null</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> copyText = <span class="hljs-function">(<span class="hljs-params">text</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">var</span> range = <span class="hljs-built_in">document</span>.createRange();<br>  <span class="hljs-keyword">var</span> copyDOM = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>);<br>  copyDOM.innerHTML = text;<br>  <span class="hljs-built_in">window</span>.getSelection().removeAllRanges();<br>  <span class="hljs-built_in">document</span>.body.appendChild(copyDOM)<br>  range.selectNode(copyDOM);<br>  <span class="hljs-built_in">window</span>.getSelection().addRange(range);<br>  <span class="hljs-keyword">var</span> successful = <span class="hljs-built_in">document</span>.execCommand(<span class="hljs-string">&#x27;copy&#x27;</span>);<br>  <span class="hljs-keyword">if</span>(successful)&#123;<br>    <span class="hljs-comment">// 复制成功到剪切板</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 复制失败，一般是因为浏览器不支持复制</span><br>  &#125;<br>  <span class="hljs-built_in">document</span>.body.removeChild(copyDOM)<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><!-- #################################### 6.end #################################### --><!-- #################################### 7.取随机字符串 #################################### --><h3 id="取随机字符串"><a href="#取随机字符串" class="headerlink" title="取随机字符串"></a>取随机字符串</h3><p>取随机字符串根据业务的不同会有不一样的取值方式，用作签名的一部分、用做随机密码….<br>这里我采用的是获取长度不定、去除容易混淆的字符oOLl,9gq,Vv,Uu,I1的随机位数的随机字符</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取随机字符串 randomString()</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> </span>len 随机字符串的长度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns <span class="hljs-variable">null</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomString</span>(<span class="hljs-params">len</span>) </span>&#123;<br>  len = len || <span class="hljs-number">32</span>; <span class="hljs-comment">// 默认随机生成32位长度字符串</span><br>  <span class="hljs-keyword">var</span> $chars = <span class="hljs-string">&#x27;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678&#x27;</span>;    <span class="hljs-comment">/****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/</span><br>  <span class="hljs-keyword">var</span> maxPos = $chars.length;<br>  <span class="hljs-keyword">var</span> randomStr = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    randomStr += $chars.charAt(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * maxPos));<br>  &#125;<br>  <span class="hljs-keyword">return</span> randomStr;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>开发</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo + volantis 搭建个人博客?</title>
    <link href="/post/9487.html"/>
    <url>/post/9487.html</url>
    
    <content type="html"><![CDATA[<p>使用hexo搭建个人博客</p><span id="more"></span><p><strong>搭建博客的框架很多，个人比较偏向于hexo框架：</strong></p><ul><li>hexo只需要专注于写文档而不需要过分担心别的问题。</li><li>hexo比较成熟，如果遇到问题也可以得到很好的解决。</li><li>hexo使用github pages进行部署，不需要购买自己的服务器就可以部署到线上。</li><li>hexo有很好的主题，如：volantis， yilia….</li></ul><p><a href="https://hexo.io/zh-cn/">hexo中文网站</a>      <a href="https://volantis.js.org/">volantis主题官方文档</a></p><h3 id="1-搭建hexo环境"><a href="#1-搭建hexo环境" class="headerlink" title="1. 搭建hexo环境"></a>1. 搭建hexo环境</h3><p> <strong>hexo是基于node开发的，首先需要安装node ，其次如果想要部署到github pages 需要安装git</strong></p><figure class="highlight powershell"><figcaption><span><1>安装淘宝镜像</span></figcaption><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">sudo npm install <span class="hljs-literal">-g</span> cnpm -<span class="hljs-literal">-registry</span>=https://registry.npm.taobao.org<br></code></pre></div></td></tr></table></figure><figure class="highlight powershell"><figcaption><span><2>安装hexo-cli</span></figcaption><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">sudo cnpm install <span class="hljs-literal">-g</span> hexo<span class="hljs-literal">-cli</span><br></code></pre></div></td></tr></table></figure><figure class="highlight powershell"><figcaption><span><3>检查是否安装成功</span></figcaption><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">hexo <span class="hljs-literal">-v</span><br></code></pre></div></td></tr></table></figure><h3 id="2-创建hexo项目"><a href="#2-创建hexo项目" class="headerlink" title="2. 创建hexo项目"></a>2. 创建hexo项目</h3><p><strong>首先创建一个空的文件夹用于存放hexo项目代码，并在创建的目录中打开终端</strong></p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">mkdir &lt;floder&gt;<br><span class="hljs-built_in">cd</span> &lt;floder&gt;<br>hexo init<br><br>// 或者直接借助hexo去实现<br><br>hexo init &lt;floder&gt; // 这里hexo会自动创建文件夹并初始化项目<br></code></pre></div></td></tr></table></figure><p><strong>安装依赖</strong></p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">npm install<br></code></pre></div></td></tr></table></figure><h3 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3. 启动项目"></a>3. 启动项目</h3><p><strong>启动项目常用的命令</strong></p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">hexo clean // 清除项目中的临时文件<br>hexo g   // OR  hexo generate 生成临时文件<br>hexo s   // OR  hexo <span class="hljs-built_in">start</span>  启动项目<br></code></pre></div></td></tr></table></figure><p><strong>此时页面可以看到一个默认的博客模板并且有一篇默认的hello world 文章</strong></p><h3 id="4-新建一篇文章"><a href="#4-新建一篇文章" class="headerlink" title="4. 新建一篇文章"></a>4. 新建一篇文章</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo new &quot;如何搭建个人博客&quot;<br></code></pre></div></td></tr></table></figure><h3 id="5-切换自己喜欢的主题"><a href="#5-切换自己喜欢的主题" class="headerlink" title="5. 切换自己喜欢的主题"></a>5. 切换自己喜欢的主题</h3><p><strong>这里以Volantis主题为例，具体的主题需要参照具体的官方文档来做</strong></p><ul><li><p><strong>下载主题插件</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm i hexo-theme-volantis <br></code></pre></div></td></tr></table></figure></li><li><p><strong>修改_config.yml中的 <span style="color:rgb(205,0,0)">theme</span> 字段为volantis</strong></p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">volantis</span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>安装 Hexo 搜索的依赖包</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm i hexo-generator-search hexo-generator-json-content<br></code></pre></div></td></tr></table></figure></li><li><p><strong>安装 Stylus 渲染器</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm i hexo-renderer-stylus<br></code></pre></div></td></tr></table></figure></li></ul><p><strong>这样就可以看到精美的主题啦，之后的细节慢慢去调试成自己喜欢的样子（参考对应的官方文档）</strong></p><h3 id="6-部署到github-pages"><a href="#6-部署到github-pages" class="headerlink" title="6. 部署到github pages"></a>6. 部署到github pages</h3><p>第一步： 在github上新建一个仓库，仓库的名字为：&lt;用户名&gt;.github.io  （必须）</p><p>第二步： 修改项目根目录下的_config.yml中的 <span style="color:rgb(205,0,0)">deploy</span> 字段为：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">//</span> <span class="hljs-string">这里修改成自己的github仓库地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure><p>第三步： 将代码部署到github pages </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo clean<br>hexo g // OR hexo generate<br>hexo d // OR hexo deploy<br></code></pre></div></td></tr></table></figure><p>此时控制台会报错：<span style="color:rgb(255,0,0)">ERROR</span> Deployer not found: git<br>这是因为项目缺少git部署的插件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install --save hexo-deployer-git<br></code></pre></div></td></tr></table></figure><p>执行以上的语句即可～～～～～～～然后重复第三步<br>此时就可以看到git仓库中已经有了一部分代码,神奇的是：<br>此时去访问：&lt;用户名&gt;.github.io 就可以看到线上的博客样式了。</p><a href="https://myblogger-1305472061.cos.ap-shanghai.myqcloud.com/github.png" title="" target="">github pages demo, JingTao-Li.github.io,</a><h3 id="7-修改github-page-为自定义的域名"><a href="#7-修改github-page-为自定义的域名" class="headerlink" title="7. 修改github page 为自定义的域名"></a>7. 修改github page 为自定义的域名</h3><p><img src="https://myblogger-1305472061.cos.ap-shanghai.myqcloud.com/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/my-yuming.png" alt="我的域名"><br><strong>点击解析，添加对应的IP地址和CNAME</strong><br><img src="https://myblogger-1305472061.cos.ap-shanghai.myqcloud.com/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/yuming-parse.png" alt="我的域名解析设置"><br>然后在当前项目的 source/ 目录下创建一个名叫 CNAME 的文件，里面的内容就是你的域名地址。接着重新部署一下就可以了。</p><h3 id="8-如何在项目中引入本地图片"><a href="#8-如何在项目中引入本地图片" class="headerlink" title="8. 如何在项目中引入本地图片"></a>8. 如何在项目中引入本地图片</h3><p><strong>第一步：</strong>安装插件：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install hexo-asset-image --save<br></code></pre></div></td></tr></table></figure><p><strong>第二步：</strong>打开根目录下的 _config.yml 文件，修改 <span style="color:rgb(205,0,0)">post_asset_folder</span> 字段为 <strong>true</strong></p><p><strong>第三步：</strong>打开 /node_modules/hexo-asset-image/index.js 文件，替换为以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><br><span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPosition</span>(<span class="hljs-params">str, m, i</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> str.split(m, i).join(m).length;<br>&#125;<br><br><span class="hljs-keyword">var</span> version = <span class="hljs-built_in">String</span>(hexo.version).split(<span class="hljs-string">&#x27;.&#x27;</span>);<br>hexo.extend.filter.register(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> config = hexo.config;<br>  <span class="hljs-keyword">if</span>(config.post_asset_folder)&#123;<br>        <span class="hljs-keyword">var</span> link = data.permalink;<br>    <span class="hljs-keyword">if</span>(version.length &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)<br>       <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>       <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br>    <span class="hljs-keyword">var</span> endPos = link.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;<br>    link = link.substring(beginPos, endPos);<br><br>    <span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.length; i++)&#123;<br>      <span class="hljs-keyword">var</span> key = toprocess[i];<br> <br>      <span class="hljs-keyword">var</span> $ = cheerio.load(data[key], &#123;<br>        <span class="hljs-attr">ignoreWhitespace</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">xmlMode</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">lowerCaseTags</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">false</span><br>      &#125;);<br><br>      $(<span class="hljs-string">&#x27;img&#x27;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> ($(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>))&#123;<br>            <span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br>            <span class="hljs-keyword">var</span> src = $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;<br>               !<span class="hljs-regexp">/^\s*\//</span>.test(src)) &#123;<br>              <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br>              <span class="hljs-comment">// In addition, to support multi-level local directory.</span><br>              <span class="hljs-keyword">var</span> linkArray = link.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;<br>                <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;<br>              &#125;);<br>              <span class="hljs-keyword">var</span> srcArray = src.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;<br>                <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;<br>              &#125;);<br>              <span class="hljs-keyword">if</span>(srcArray.length &gt; <span class="hljs-number">1</span>)<br>                srcArray.shift();<br>              src = srcArray.join(<span class="hljs-string">&#x27;/&#x27;</span>);<br>              $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>, config.root + link + src);<br>              <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);<br>            <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info($(<span class="hljs-built_in">this</span>));<br>        &#125;<br>      &#125;);<br>      data[key] = $.html();<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p><strong>第四步：</strong>之后在新建一个新的文档内容的时候会自动生成一个同名文件夹，里面就可以放本页面需要的图片源文件，在需要的地方引入：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">![<span class="hljs-string">这是代替图片的文字，随便写</span>](<span class="hljs-link">图片名字</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>搭建个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/post/3eeb.html"/>
    <url>/post/3eeb.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
