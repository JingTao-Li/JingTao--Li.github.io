import{_ as t,M as e,p,q as o,R as l,Q as n,t as a,N as c,V as i,a1 as u}from"./framework-2d0cd674.js";const d={},r=n("p",null,"分享个人面试过程中常见的问题，也包含自己对问题的理解。不断完善.....",-1),k=n("h3",{id:"new关键字的原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#new关键字的原理","aria-hidden":"true"},"#"),a(" new关键字的原理")],-1),h=n("p",null,"当对象使用new关键字创建的时候，程序内部都做了什么？",-1),v=n("blockquote",null,[n("p",null,"1.开辟内存地址，里面放置一个空的对象 2.this指向了空的对象 3.构造函数的参数给空的对象赋值 4.将赋值后的对象返回给外面使用")],-1),g=n("hr",null,null,-1),b=n("h3",{id:"跨域的产生原因和如何解决",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#跨域的产生原因和如何解决","aria-hidden":"true"},"#"),a(" 跨域的产生原因和如何解决？")],-1),_=u(`<hr><h3 id="闭包的概念和闭包的优点" tabindex="-1"><a class="header-anchor" href="#闭包的概念和闭包的优点" aria-hidden="true">#</a> 闭包的概念和闭包的优点</h3><p>闭包：在函数内嵌套函数，使内部函数中的变量被外部访问成为可能。 优点：</p><blockquote><p>1.实现封装，防止变量被提升到外部去，减少命名冲突的可能性。 2.匿名自执行函数，匿名自执行函数可以减小内存消耗。 3.缓存。</p></blockquote><p>缺点：</p><blockquote><p>1.内部函数的变量声明后会一直存在于内存中不能够得到释放，造成内存泄漏。这也导致了可以缓存的优点。</p></blockquote><hr><h3 id="bfc概念和触发方式" tabindex="-1"><a class="header-anchor" href="#bfc概念和触发方式" aria-hidden="true">#</a> BFC概念和触发方式</h3><p>BFC：Block Formatting Context 块级格式化上下文，一个BFC区域包含创建上下文元素的所有子元素，但是不包含已经创建了的新BFC的子元素的内部元素。 如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>father-box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>son-box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- 
    在上面的文档结构下，#father-box和#son-box都是一个BFC区域，
    #father-box包含他内部的三个div，但是不包含span
    #son-box包含的是他内部的三个span
   --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>触发方式：</p><blockquote><p>1.body根元素。 2.设置浮动，float:right/left 3.设置定位: position: absolute/fixed 4.设置display为: inline-block、table-cell、flex... 5.设置overflow: hidden/auto/scroll</p></blockquote><hr><h3 id="class和构造函数的区别是什么" tabindex="-1"><a class="header-anchor" href="#class和构造函数的区别是什么" aria-hidden="true">#</a> class和构造函数的区别是什么？</h3><blockquote><p>1.构造函数本身是函数，因此会有函数声明的提升。 2.class只能通过new来实例化。 3.class的原型上的属性不能遍历。</p></blockquote><hr>`,16);function m(f,x){const s=e("RouterLink");return p(),o("div",null,[r,l(" more "),k,h,v,g,b,n("p",null,[a("关于跨域，我想要整理一篇独立的文章去解释的理解，这里直接链接到 "),c(s,{to:"/post/9ff3.html"},{default:i(()=>[a("关于跨域，我想说.....")]),_:1})]),_])}const B=t(d,[["render",m],["__file","前端常见面试题积累.html.vue"]]);export{B as default};
