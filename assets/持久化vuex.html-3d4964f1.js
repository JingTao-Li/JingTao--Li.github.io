import{_ as n,p as s,q as a,Q as t,R as p,a1 as e}from"./framework-5866ffd3.js";const o={},c=p("p",null,"vue 项目中一般都需要存储用户的信息、用户保存的设置、一些操作的状态等等，大量的信息存储会选择数据库，但是像是用户下单状态、用户音视频通话状态、微信一键登录返回 code 等一些数据存储在数据库无疑是没有意义的。为了防止存储在 vuex 中的数据一经用户刷新页面就丢失导致体验不好的现象，我们可以对 vuex 进行持久化保存，同时可以区分一些数据是存储在 localStorage 中还是 sessionStorage 中。",-1),l=e(`<hr><blockquote><p>原理： createStore 也就是创建 vuex 实例时，vuex 向外提供了 plugins 属性，plugins 的值是一个数据，它会向其中所有的元素注入 store 对象，为了方便实时获取到 store，并且会在 store 更新时触发所有 plugins 中的事件，用 subscribe 事件去监听每次 mutation 事件。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token generic-function"><span class="token function">createStore</span><span class="token generic class-name"><span class="token operator">&lt;</span>RootState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  modules<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  strict<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否开启严格模式</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 元素为函数，并且函数的第一个参数是store对象</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="如此一来-可以实时获取到-store-并能够在-store-更新时触发回调-就可以直接操作-store-的存与取了" tabindex="-1"><a class="header-anchor" href="#如此一来-可以实时获取到-store-并能够在-store-更新时触发回调-就可以直接操作-store-的存与取了" aria-hidden="true">#</a> 如此一来，可以实时获取到 store，并能够在 store 更新时触发回调，就可以直接操作 store 的存与取了</h5><p>这个是负责存储和取值的实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Socket</span> <span class="token punctuation">{</span>
  key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  modules<span class="token operator">:</span> Modules<span class="token punctuation">;</span>
  modulesKeys<span class="token operator">:</span> ModulesKeys<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Modules</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">ModulesKeys</span> <span class="token punctuation">{</span>
  local<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  session<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Mutation</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  payload<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> exclude <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;actions&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;getters&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mutations&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;namespaced&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Persistent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">,</span> modules<span class="token punctuation">,</span> modulesKeys <span class="token punctuation">}</span><span class="token operator">:</span> Socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>store<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> localOldState <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;{}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> sessionOldState <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;{}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> oldState<span class="token operator">:</span> Modules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>oldState<span class="token punctuation">,</span> localOldState<span class="token punctuation">,</span> sessionOldState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>oldState<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> oldKey <span class="token keyword">in</span> oldState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modules<span class="token punctuation">[</span>oldKey<span class="token punctuation">]</span> <span class="token operator">=</span> oldState<span class="token punctuation">[</span>oldKey<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      store<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>modules<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mutation<span class="token operator">:</span> Mutation<span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断是否需要缓存数据至localStorage</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>modulesKeys<span class="token punctuation">.</span>local<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> localData <span class="token operator">=</span> <span class="token function">setData</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">,</span> modulesKeys<span class="token punctuation">.</span>local<span class="token punctuation">)</span><span class="token punctuation">;</span>
        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>localData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 判断是否需要缓存数据至sessionStorage</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>modulesKeys<span class="token punctuation">.</span>session<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> sessionData <span class="token operator">=</span> <span class="token function">setData</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">,</span> modulesKeys<span class="token punctuation">.</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>sessionData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">setData</span><span class="token punctuation">(</span>state<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> module<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> data<span class="token operator">:</span> Modules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">of</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="同时推荐一个-createlogger-的-plugin-可以实时打印-store-的更改" tabindex="-1"><a class="header-anchor" href="#同时推荐一个-createlogger-的-plugin-可以实时打印-store-的更改" aria-hidden="true">#</a> 同时推荐一个 createLogger 的 plugin，可以实时打印 store 的更改</h4><p>这里我的文档结构为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  | -- store
    | -- modules
      | -- app.ts
      | -- user.ts
    | -- plugins
      | -- persistent.ts
    index.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终的 store/index.ts 代码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> createLogger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Persistent <span class="token keyword">from</span> <span class="token string">&#39;./plugins/persistent&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> userState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/store/modules/user&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> appState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/store/modules/app&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> debug <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MODE</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">globEager</span><span class="token punctuation">(</span><span class="token string">&#39;./modules/*.ts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这里只是举例： user  app 模块</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RootState</span> <span class="token punctuation">{</span>
  user<span class="token operator">:</span> userState<span class="token punctuation">;</span>
  app<span class="token operator">:</span> appState<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> modules<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> module <span class="token operator">=</span> files<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>
  <span class="token keyword">const</span> moduleName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\.\\/(.*)\\/(.*)\\.\\w+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  modules<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这是一个vuex本地存储插件，默认把vuex所有数据都做存储了</span>
<span class="token comment">// local代表存储在localStorage里面，进行永久存储</span>
<span class="token comment">// session代表存储在sessionStorage里面，进行临时存储</span>
<span class="token comment">// 都接收Modules的文件名数组，如：[&#39;app&#39;, &#39;keepAlive&#39;, &#39;user&#39;]</span>
<span class="token comment">// 用户相关的数据建议直接存储在local里面，session里面会导致打开新窗口时获取不到token值，因为session只针对当前会话</span>
<span class="token keyword">const</span> persistent <span class="token operator">=</span> <span class="token function">Persistent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  key<span class="token operator">:</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">,</span>
  modules<span class="token punctuation">,</span>
  modulesKeys<span class="token operator">:</span> <span class="token punctuation">{</span>
    local<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>modules<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item <span class="token operator">!==</span> <span class="token string">&#39;call&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    session<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;call&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token generic-function"><span class="token function">createStore</span><span class="token generic class-name"><span class="token operator">&lt;</span>RootState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  modules<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>modules<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  strict<span class="token operator">:</span> debug<span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> debug <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> persistent<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>persistent<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function i(u,k){return s(),a("div",null,[c,t(" more "),l])}const d=n(o,[["render",i],["__file","持久化vuex.html.vue"]]);export{d as default};
